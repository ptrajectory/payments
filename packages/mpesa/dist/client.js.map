{"version":3,"sources":["../src/client.ts","../src/lib/utils.ts"],"sourcesContent":["import axios, { AxiosError } from \"axios\"\nimport { AccessTokenResponse, SendPaymentRequestBody, SendPaymentResponse, SendPayoutRequest, SendPayoutResponse } from \"./lib/types.ts\"\nimport { format_mpesa_date } from \"./lib/utils.ts\"\nimport fetch from 'node-fetch'\n\n\n\n\nclass MpesaClient {\n    private _env = 'sandbox'\n    private _consumer_key = ''\n    private _consumer_secret = ''\n    private _pass_key = ''\n    private _business_short_code: number\n    private _callback_url = ''\n    private _base_url = 'https://sandbox.safaricom.co.ke'\n    private _password = ''\n    private _security_credential = ''\n\n    constructor(props: Partial<{\n        /**\n         * @name env\n         * @description The environment to use\n         * @type {'sandbox' | 'production'}\n         */\n        env: 'sandbox' | 'production',\n        /**\n         * @name consumer_key\n         * @description The consumer key got from the daraja portal\n         * @type {string}\n         */\n        consumer_key: string,\n        /**\n         * @name consumer_secret\n         * @description The consumer secret got from the daraja portal\n         * @type {string}\n         */\n        consumer_secret: string,\n        /**\n         * @name pass_key\n         * @description The pass key got from the daraja portal\n         * @type {string}\n         */\n        pass_key: string, \n        /**\n         * @name business_short_code\n         * @description The business short code got from the daraja portal\n         * @type {number}\n         */\n        business_short_code: number,\n        /**\n         * @name callback_url\n         * @description The callback url to be used by the mpesa api\n         * @type {string}\n         */\n        callback_url: string\n        /**\n         * @name b2c\n         * @description The b2c credentials for b2c transactions\n         * @type {Partial<{\n         *  password: string,\n         *  security_credential: string\n         * }>}\n         */\n        b2c: Partial<{\n            password: string,\n            security_credential: string\n        }>\n    }>) {\n        this._env = props.env || 'sandbox' \n        this._consumer_key = props.consumer_key || '' \n        this._consumer_secret = props.consumer_secret || '' \n        this._pass_key = props.pass_key || ''\n        this._business_short_code = props.business_short_code || 0\n        this._callback_url = props.callback_url || ''\n        this._password = props.b2c?.password || ''\n        this._security_credential = props.b2c?.security_credential || ''\n        this._base_url = props.env === 'sandbox' ? 'https://sandbox.safaricom.co.ke' : 'https://api.safaricom.co.ke'\n\n    }\n\n\n    /**\n     * @name generate_access_token \n     * @description Generates an access token for the mpesa api \n     * @returns \n     */\n    private async _generate_access_token() {\n        const username = this._consumer_key \n        const password = this._consumer_secret\n        \n        const basic_auth = Buffer.from(username + ':' + password).toString('base64') \n    \n        const url = `${this._base_url}/oauth/v1/generate`\n\n        try {\n            const res = (await fetch(`${url}?grant_type=client_credentials`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': 'Basic ' + basic_auth,\n                    'Content-Type': 'application/json'\n                }\n            }))\n\n            let access_token = '' \n\n            if(res.status === 200) {\n                const data = (await res.json()) as AccessTokenResponse\n                access_token = data.access_token\n            }else{\n                return Promise.reject({\n                    message: 'Error generating access token',\n                    error: await res.json()\n                })\n            }\n            return access_token\n        } catch (e) \n        {   \n            return Promise.reject({\n                message: 'Error generating access token',\n                error: (e as AxiosError)?.response?.data\n            })\n        }\n    }\n\n\n    private async _generate_password() {\n        const timestamp = format_mpesa_date(new Date());\n        const pre = `${this._business_short_code}${this._pass_key}${timestamp}`\n        const password = Buffer.from(pre).toString(\"base64\");\n\n        return {\n            password,\n            timestamp\n        }\n    }\n\n\n    /**\n     * @name send_payment_request \n     * @description Sends a payment request to the mpesa api \n     * @example \n     * ```ts\n     * const client = new MpesaClient({\n     *   env: 'sandbox',\n     *   consumer_key: process.env.MPESA_CONSUMER_KEY,\n     *   consumer_secret: process.env.MPESA_CONSUMER_SECRET,\n     *   pass_key: process.env.MPESA_PASSKEY,\n     *   business_short_code: process.env.MPESA_SHORTCODE,\n     *   callback_url: ''\n     * })\n     * @param props \n     * @returns \n     */\n    async send_payment_request(props: Partial<{\n        /**\n         * @name transaction_type\n         * @description The type of transaction to be performed\n         * @type {'CustomerPayBillOnline' | 'CustomerBuyGoodsOnline'}\n         */\n        transaction_type: 'CustomerPayBillOnline' | 'CustomerBuyGoodsOnline',\n        /**\n         * @name amount\n         * @description The amount to be sent\n         * @type {number}\n         */\n        amount: number,\n        /**\n         * @name phone_number\n         * @description The phone number to send the money to\n         * @type {number}\n         */\n        phone_number: number,\n        /**\n         * @name transaction_desc\n         * @description The description of the transaction\n         * @type {string}\n         */\n        transaction_desc: string\n    }>){\n        const { transaction_desc, phone_number, transaction_type, amount } = props\n        const base_url = this._base_url\n        \n        const url = `${base_url}/mpesa/stkpush/v1/processrequest`\n        \n        try {\n            const access_token = await this._generate_access_token()\n\n            const {\n                password,\n                timestamp\n            } = await this._generate_password()\n    \n            const response = await axios.post<SendPaymentResponse>(url, {\n                BusinessShortCode: this._business_short_code,\n                Password: password,\n                AccountReference: 'account',\n                Amount: amount,\n                CallBackURL: this._callback_url,\n                PartyA: phone_number,\n                PartyB: this._business_short_code,\n                PhoneNumber: phone_number,\n                Timestamp: timestamp,\n                TransactionDesc: transaction_desc,\n                TransactionType: transaction_type \n            } as SendPaymentRequestBody, {\n                headers: {\n                    \"Authorization\": `Bearer ${access_token}`\n                }\n            })  \n            return response.data\n        } \n        catch (e)\n        {\n            return Promise.reject({\n                message: 'Error generating sending payment request',\n                error: (e as AxiosError)?.response?.data\n            })\n        }\n    \n    }\n\n\n    async send_payout_request(props: Partial<{\n        /**\n         * @name amount\n         * @description The amount to be sent\n         * @type {number}\n         */\n        amount: number,\n        /**\n         * @name transaction_type\n         * @description The type of transaction to be performed\n         * @type {'BusinessPayment' | 'SalaryPayment' | 'PromotionPayment'}\n         */\n        transaction_type: 'BusinessPayment' | 'SalaryPayment' | 'PromotionPayment',\n        /**\n         * @name phone_number\n         * @description The phone number to send the money to\n         * @type {number}\n         */\n        phone_number: number,\n        /**\n         * @name description\n         * @description The description of the transaction\n         * @type {string}\n         */\n        description: string\n    }>){\n        const { amount, transaction_type, phone_number, description } = props\n        const base_url = this._base_url\n        const url = `${base_url}/mpesa/b2c/v1/paymentrequest`\n        try {\n            const access_token = await this._generate_access_token()\n\n            const response = await axios.post<SendPayoutResponse>(url, {\n                InitiatorName: this._password,\n                SecurityCredential: this._security_credential,\n                CommandID: transaction_type,\n                Amount: amount,\n                Occassion: 'occassion',\n                PartyA: this._business_short_code,\n                PartyB: phone_number,\n                QueueTimeOutURL: this._callback_url,\n                ResultURL: this._callback_url,\n                Remarks: description\n            } as SendPayoutRequest, {\n                headers: {\n                    'Authorization': `Bearer ${access_token}`\n                }\n            })\n\n            return response.data\n        }\n        catch (e)\n        {\n            return Promise.reject({\n                message: 'Error initiating payout',\n                error: (e as AxiosError)?.response?.data\n            })\n        }\n    }\n}\n\n\nexport default MpesaClient\n","export const format_mpesa_date = (date: Date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    let string_month = month.toString();\n    if (string_month.length === 1) {\n      string_month = `0${string_month}`;\n    }\n    const day = date.getDate();\n    let string_day = day.toString();\n    if (string_day.length === 1) {\n      string_day = `0${string_day}`;\n    }\n    const hours = date.getHours();\n    let string_hours = hours.toString();\n    if (string_hours.length === 1) {\n      string_hours = `0${string_hours}`;\n    }\n    const minutes = date.getMinutes();\n    let string_minutes = minutes.toString();\n    if (string_minutes.length === 1) {\n      string_minutes = `0${string_minutes}`;\n    }\n    const seconds = date.getSeconds();\n    let string_seconds = seconds.toString();\n    if (string_seconds.length === 1) {\n      string_seconds = `0${string_seconds}`;\n    }\n    return `${year}${string_month}${string_day}${string_hours}${string_minutes}${string_seconds}`;\n  }\n\n\n  export function _generate_password(): {\n    password: string;\n    timestamp: string;\n  }{\n    const mpesa_shortcode = process.env.BUSINESS_SHORTCODE;\n    const mpesa_passkey = process.env.PASS_KEY;\n    const timestamp = format_mpesa_date(new Date());\n    const pre = `${mpesa_shortcode}${mpesa_passkey}${timestamp}`\n    const password = Buffer.from(pre).toString(\"base64\");\n    return {\n      password,\n      timestamp,\n    }\n  }"],"mappings":"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","names":[]}