{"version":3,"sources":["../../src/events/express.ts","../../src/lib/schemas.ts","../../src/client.ts","../../src/lib/utils.ts"],"sourcesContent":["import EventEmitter from 'events'\nimport { type tPayoutRequestCallbackBody, type tPaymentRequestCallbackBody, payment_request_callback_body_schema, payout_request_callback_body_schema, payment_request_body, tPaymentRequestBody } from '../lib/schemas'\nimport { Request, Response } from 'express'\nimport z from 'zod'\nimport 'dotenv/config'\nimport MpesaClient from '../client'\nimport { SendPaymentResponse, SendPayoutRequest, SendPayoutResponse } from '../lib/types'\nimport { tPayoutRequestBody } from '../lib/schemas'\nimport { payout_request_body } from '../lib/schemas'\n\ntype CallBackEvents = {\n    /**\n     * Emitted when a payout request is successful\n     * this is where you can include logic for updating your database\n     */\n    'payout:success': tPayoutRequestCallbackBody,\n    /**\n     * Emitted when a payout request has a response code other than 0\n     * this is where you can include logic for updating your database\n     */\n    'payout:error': tPayoutRequestCallbackBody,\n    /**\n     * Emitted when a payout request has an invalid body\n     * this is where you can include logic for updating your database\n     */\n    'payout:invalid': {\n        received: unknown,\n        error: z.typeToFlattenedError<tPayoutRequestCallbackBody>\n    },\n    /**\n     * Emitted when a payment request is successful\n     * this is where you can include logic for updating your database\n     */\n    'payment:success': tPaymentRequestCallbackBody,\n    /**\n     * Emitted when a payment request has a response code other than 0\n     * this is where you can include logic for updating your database\n     */\n    'payment:error': tPaymentRequestCallbackBody,\n    /**\n     * Emitted when a payment request has an invalid body\n     * this is where you can include logic for updating your database\n     */\n    'payment:invalid': {\n        received: unknown,\n        error: z.typeToFlattenedError<tPaymentRequestCallbackBody>\n    },\n    /**\n     * Emitted when an uncaught exception occurs\n     * This is where tou can add your logging solution, e.g sentry\n     */\n    'uncaughtException': unknown\n    /**\n     * Emmited when a payment request has successfully been sent to the mpesa api\n     * This is where to include logic for updating your database\n     */\n    'payment-request:success': SendPaymentResponse\n    /**\n     * Emmited when a payment request has failed to be sent to the mpesa api \n     * This can be either due to an error in the request body or an error from the mpesa api, **Note** you need to include validation logic to know which error occured\n     */\n    'payment-request:error': {\n        type: 'code' | 'unknown' | 'body-error'\n        error: SendPaymentResponse | unknown | z.typeToFlattenedError<tPaymentRequestBody>\n    }\n    /**\n     * Emmited when a payout request has successfully been sent to the mpesa api \n     * This is where to include logic for updating your database\n     */\n    'payout-request:success': SendPayoutResponse\n    /**\n     * Emmited when a payout request has failed to be sent to the mpesa api\n     * This can be either due to an error in the request body or an error from the mpesa api, **Note** you need to include validation logic to know which error occured\n     */\n    'payout-request:error': {\n        type: 'code' | 'unknown' | 'body-error'\n        error: SendPayoutRequest | unknown | z.typeToFlattenedError<tPayoutRequestBody>\n    }\n}\n\n/**\n * `ExpressMpesaEvents` class provides events and methods for handling MPesa events.\n * \n * @example\n * ```\n * const mpesaEvents = new ExpressMpesaEvents();\n * mpesaEvents.on('payout:success', data => { ... });\n * ```\n */\nclass ExpressMpesaEvents extends EventEmitter {\n\n    client: MpesaClient \n    \n    constructor(){\n        super()\n        this.paymentsCallbackHandler = this.paymentsCallbackHandler.bind(this)\n        this.payoutsCallbackHandler = this.payoutsCallbackHandler.bind(this)\n        this.paymentRequestHandler = this.paymentRequestHandler.bind(this)\n        this.payoutRequestHandler = this.payoutRequestHandler.bind(this)\n        this.client = new MpesaClient({\n            b2c: {\n                consumer_key: process.env.B2C_MPESA_CONSUMER_KEY,\n                consumer_secret: process.env.B2C_MPESA_CONSUMER_SECRET,\n                pass_key: process.env.B2C_MPESA_PASSKEY,\n                password: process.env.B2C_PASSWORD,\n                security_credential: process.env.B2C_SECURITY_CREDENTIAL,\n                short_code: Number(process.env.B2C_MPESA_SHORTCODE),\n            },\n            c2b: {\n                consumer_key: process.env.C2B_MPESA_CONSUMER_KEY,\n                consumer_secret: process.env.C2B_MPESA_CONSUMER_SECRET,\n                pass_key: process.env.C2B_MPESA_PASSKEY,\n                short_code: Number(process.env.C2B_MPESA_SHORTCODE)\n            }\n        })\n    }\n\n    /**\n     * Emits an event.\n     * \n     * @param event The event to emit.\n     * @param data The data to pass to the event listeners.\n     */\n    public emit = <K extends keyof CallBackEvents>(event: K, data: CallBackEvents[K]) => super.emit(event, data)\n    /**\n     * Registers an event listener.\n     * \n     * @param event The event to listen for.\n     * @param listener The callback function to run when the event is emitted.\n     */\n    public on = <K extends keyof CallBackEvents>(event: K, listener: (data: CallBackEvents[K]) => void) => super.on(event, listener)\n\n    /**\n     * @description Handles the callback from the mpesa api for payouts\n     * @param req \n     * @param res \n     */\n    public async payoutsCallbackHandler(req: Request, res: Response) {\n        res.status(200).send('OK')\n        const parsed = payout_request_callback_body_schema.safeParse(req.body)\n        if (!parsed.success){\n            this.emit('payout:invalid', {\n                received: req.body,\n                error: parsed.error.formErrors\n            })\n        }\n        else \n        {\n            const data = parsed.data \n            try {\n                switch (data.Result?.ResultCode?.toString()){\n                    case '0':{\n                        this.emit('payout:success', data)\n                        break;\n                    }\n                    default: {\n                        this.emit('payout:error', data)\n                    }\n                }\n            }\n            catch (e)\n            {\n                this.emit('uncaughtException', e)\n            }\n        }\n    }\n\n    /**\n     * @description Handles the callback from the mpesa api for payments\n     * @param req \n     * @param res \n     */\n    public async paymentsCallbackHandler(req: Request, res: Response) {\n        res.status(200).send('OK')\n        const parsed = payment_request_callback_body_schema.safeParse(req.body)\n        if (!parsed.success){\n            this.emit('payment:invalid', {\n                received: req.body,\n                error: parsed.error.formErrors\n            })\n        }\n        else \n        {\n            const data = parsed.data \n            try {\n                switch (data.Body?.stkCallback?.ResultCode?.toString()){\n                    case '0':{\n                        this.emit('payment:success', data)\n                        break;\n                    }\n                    default: {\n                        this.emit('payment:error', data)\n                    }\n                }\n\n            } catch(e)\n            {\n                this.emit('uncaughtException', e)\n            }\n        }\n    }\n\n\n    /**\n     * @name payoutRequestHandler\n     * @description Handles the payment request from the client\n     * @param req \n     * @param res \n     */\n    public async paymentRequestHandler(req: Request, res: Response){\n\n        const body = req.body\n\n        const parsed = payment_request_body.safeParse(body)\n\n        if(!parsed.success){\n            this.emit('payment-request:error', {\n                type: 'body-error',\n                error: parsed.error.formErrors\n            })\n            res.status(400).send(parsed.error.formErrors)\n            return\n        }\n\n        const data = parsed.data\n\n        try {\n            const daraja_response = await this.client.send_payment_request(data)\n\n\n            const code = daraja_response?.ResponseCode \n\n            switch(code){\n                case \"0\":{\n                    res.status(200).send(daraja_response)\n                    this.emit('payment-request:success', daraja_response)\n                    break;\n                };\n                default:{\n                    res.status(500).send({\n                        message: \"Wrong result code returned\",\n                        error: daraja_response\n                    })\n                    this.emit('payment-request:error', {\n                        type: 'code',\n                        error: daraja_response\n                    })\n                    return\n                }\n            }\n        } \n        catch (e)\n        {\n            res.status(500).send({\n                message: \"Something went wrong\",\n                error: e\n            })\n            this.emit('payment-request:error', {\n                type: 'unknown',\n                error: e\n            })\n            return\n        }\n    }\n\n\n    public async payoutRequestHandler(req: Request, res: Response){\n        const body = req.body \n\n        const parsed = payout_request_body.safeParse(body)\n\n\n        if(!parsed.success){\n            this.emit('payout-request:error', {\n                type: 'body-error',\n                error: parsed.error.formErrors\n            })\n            res.status(400).send(parsed.error.formErrors)\n            return\n        }\n\n        const data = parsed.data\n\n        try {\n\n            const daraja_response = await this.client.send_payout_request(data)\n\n            const code = daraja_response?.ResponseCode \n\n            switch(code){\n                case \"0\":{\n                    res.status(200).send(daraja_response)\n                    this.emit('payout-request:success', daraja_response)\n                    break;\n                };\n                default:{\n                    res.status(500).send({\n                        message: \"Wrong result code returned\",\n                        error: daraja_response\n                    })\n                    this.emit('payout-request:error', {\n                        type: 'code',\n                        error: daraja_response\n                    })\n                    return\n                }\n            }\n\n        }\n        catch (e)\n        {\n            res.status(500).send({\n                message: \"Something went wrong\",\n                error: e\n            })\n            this.emit('payout-request:error', {\n                type: 'unknown',\n                error: e\n            })\n            return\n        }\n    }\n\n    /**\n     * @name setTestUrl\n     * @description Sets the test url for the client, this is for when your callback url will probably change dynamically e.g when testing with ngrok\n     * @param url \n     */\n    public setTestUrl(url: string){\n        this.client.set_callback_url(url)\n    }\n\n    /**\n     * @name init\n     * @description Initializes the client with details, that cannot be automatically set using environment variables \n     *              - **Note** be sure to call this at the start of your application or before you start using the client\n     * \n     * @param props \n     */\n    public init(props: Partial<{\n        env: 'production' | 'sandbox',\n        c2b_business_name: string,\n        b2c_business_name: string,\n    }>){\n        this.client.set_client({\n            env: props.env,\n            b2c_business_name: props.b2c_business_name,\n            c2b_business_name: props.c2b_business_name\n        })\n    }\n}\n\nexport default new ExpressMpesaEvents()\n\nexport {\n    ExpressMpesaEvents\n}","import z from 'zod'\n\n/**\n * @name payout_request_callback_body_schema\n * @description Schema for the body of the payout request callback\n * @type {zod.Schema}\n */\nconst payout_request_callback_body_schema = z.object({\n    Result: z.object({\n        ResultType: z.number().optional(),\n        ResultCode: z.number().optional(),\n        ResultDesc: z.string().optional(),\n        OriginatorConversationID: z.string().optional(),\n        ConversationID: z.string().optional(),\n        TransactionID: z.string().optional(),\n        ReferenceData: z.object({\n            ReferenceItem: z.object({\n                Key: z.string().optional(),\n                Value: z.string().optional()\n            }).optional()\n        }).optional()\n    }).optional()\n})\n\ntype tPayoutRequestCallbackBody = z.infer<typeof payout_request_callback_body_schema>\n\n\n/**\n * @name payment_request_callback_body_schema\n * @description Schema for the body of the payment request callback \n * @type {zod.Schema}\n */\nconst payment_request_callback_body_schema = z.object({\n    Body: z.object({\n        stkCallback: z.object({\n            MerchantRequestID: z.string(),\n            CheckoutRequestID: z.string(),\n            ResultCode: z.number().optional(),\n            ResultDesc: z.string().optional(),\n            CallbackMetadata: z.object({\n                Item: z.array(z.object({\n                    Name: z.string(),\n                    Value: z.string()\n                })).optional()\n            }).array().optional()\n        })\n    })\n})\n\ntype tPaymentRequestCallbackBody = z.infer<typeof payment_request_callback_body_schema> \n\n\n/**\n * @name payment_request_body \n * @description Schema for the body of the payment request body \n * @type {zod.Schema}\n */\nconst payment_request_body = z.object({\n    amount: z.number().min(0, {\n        message: \"Amount cann't be 0 or less\"\n    }),\n    phone_number: z.number(),\n    transaction_desc: z.string().optional(),\n    transaction_type: z.enum(['CustomerPayBillOnline', 'CustomerBuyGoodsOnline'])\n})\n/**\n * @name tPaymentRequestBody \n * @description the payment request body type\n */\ntype tPaymentRequestBody = z.infer<typeof payment_request_body>\n\n/**\n * @name payout_request_body\n * @description Schema for the body of a payout request\n * @type {zod.Schema}\n */\nconst payout_request_body = z.object({\n    amount: z.number().min(0, {\n        message: \"Amount cann't be 0 or less\"\n    }),\n    phone_number: z.number(),\n    transaction_desc: z.string().optional(),\n    transaction_type: z.enum([\"BusinessPayment\",\"SalaryPayment\",\"PromotionPayment\"])\n})\n\n/**\n * @name tPayoutRequestBody \n * @description the payout request body \n */\ntype tPayoutRequestBody = z.infer<typeof payout_request_body>\n\n\nexport {\n    payment_request_callback_body_schema,\n    type tPaymentRequestCallbackBody,\n    payout_request_callback_body_schema,\n    type tPayoutRequestCallbackBody,\n    payment_request_body,\n    type tPaymentRequestBody,\n    payout_request_body,\n    type tPayoutRequestBody\n}","import axios, { AxiosError } from \"axios\"\nimport { AccessTokenResponse, B2BSetupCredentials, C2BSetupCredentials, SendPaymentRequestBody, SendPaymentResponse, SendPayoutRequest, SendPayoutResponse } from \"./lib/types.ts\"\nimport { format_mpesa_date } from \"./lib/utils.ts\"\nimport fetch from 'node-fetch'\nimport { payment_request_callback_body_schema, tPaymentRequestCallbackBody } from \"./lib/schemas.ts\";\n\n\n\nclass MpesaEvent {\n    // private _event_type: 'express' | 'payout';\n    constructor(props?: Partial<{\n        /**\n         * @name event_type\n         * @description The type of mpesa event\n         * @type {'express' | 'payout'}\n         */\n        event_type: 'express' | 'payout' \n\n    }>){\n        // this._event_type = props.event_type || 'express'\n    }\n\n    /**\n     * @name handle_payout_request_callback\n     * @description Handles the payout request callback\n     * @param body \n     * @returns \n     */\n    async handle_payment_request_callback(body: Partial<tPaymentRequestCallbackBody>){\n        const parsed = payment_request_callback_body_schema.safeParse(body) \n\n        if(!parsed.success) {\n            return Promise.reject(parsed.error.formErrors)\n            // TODO: handle error locally\n        }\n\n        const data = parsed.data\n\n        return data\n    }\n\n\n    /**\n     * @name handle_payout_request_callback\n     * @description Handles the payout request callback\n     * @param body \n     * @returns \n     */\n    async handle_payout_request_callback(body: Partial<tPaymentRequestCallbackBody>){\n        const parsed = payment_request_callback_body_schema.safeParse(body)\n\n        if(!parsed.success) {\n            return Promise.reject(parsed.error.formErrors)\n        }\n\n        const data = parsed.data\n\n        return data\n    }\n}\n\n\n\nclass MpesaClient {\n    private _env = 'sandbox'\n    private _callback_url = ''\n    private _base_url = 'https://sandbox.safaricom.co.ke'\n    private _b2c: B2BSetupCredentials = {}\n    private _c2b: C2BSetupCredentials = {}\n\n    constructor(props: Partial<{\n        /**\n         * @name env\n         * @description The environment to use\n         * @type {'sandbox' | 'production'}\n         */\n        env: 'sandbox' | 'production',\n        /**\n         * @name b2c\n         * @description The b2c credentials, if you plan to use the b2c api\n         * @type {B2BSetupCredentials}\n         */\n        b2c: B2BSetupCredentials,\n        /**\n         * @name c2b\n         * @description The c2b credentials, if you plan to use the c2b api\n         * @type {C2BSetupCredentials}\n         */\n        c2b: C2BSetupCredentials,\n        /**\n         * @name callback_url\n         * @description The callback url to use for the api, \n         * **Note** do not postfix the url with a `/` also, the url needs to be https\n         * @example https://example.com and not https://example.com/ or http://example.com \n         */\n        callback_url: string\n    }>) {\n        this._env = props.env || 'sandbox' \n        this._base_url = (props.env === 'sandbox' || props.env === undefined) ? 'https://sandbox.safaricom.co.ke' : 'https://api.safaricom.co.ke'\n        this._b2c = props.b2c || {}\n        this._c2b = props.c2b || {}\n        this._callback_url = props.callback_url || ''\n    }\n\n\n    /**\n     * @name generate_access_token \n     * @description Generates an access token for the mpesa api \n     * @returns \n     */\n    private async _generate_access_token(type: 'b2c' | 'c2b' = 'c2b') {\n        const username = type === 'b2c' ? this._b2c.consumer_key : this._c2b.consumer_key\n        const password = type === 'b2c' ? this._b2c.consumer_secret : this._c2b.consumer_secret\n        \n        const basic_auth = Buffer.from(username + ':' + password).toString('base64') \n    \n        const url = `${this._base_url}/oauth/v1/generate`\n\n        try {\n            const res = (await fetch(`${url}?grant_type=client_credentials`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': 'Basic ' + basic_auth,\n                    'Content-Type': 'application/json'\n                }\n            }))\n\n            let access_token = '' \n\n            if(res.status === 200) {\n                const data = (await res.json()) as AccessTokenResponse\n                access_token = data.access_token\n            }else{\n                return Promise.reject({\n                    message: 'Error generating access token',\n                    error: res.statusText\n                })\n            }\n            return access_token\n        } catch (e) \n        {   \n            return Promise.reject({\n                message: 'Error generating access token',\n                error: (e as AxiosError)?.response?.data\n            })\n        }\n    }\n\n\n    private async _generate_password(type: 'b2c' | 'c2b' = 'c2b') {\n        const timestamp = format_mpesa_date(new Date());\n        const short_code = type === 'b2c' ? this._b2c.short_code : this._c2b.short_code\n        const pass_key = type === 'b2c' ? this._b2c.pass_key : this._c2b.pass_key\n        const pre = `${short_code}${pass_key}${timestamp}`\n        const password = Buffer.from(pre).toString(\"base64\");\n\n        return {\n            password,\n            timestamp\n        }\n    }\n\n\n    /**\n     * @name send_payment_request \n     * @description Sends a payment request to the mpesa api \n     * @example \n     * ```ts\n     * const client = new MpesaClient({\n     *   env: 'sandbox',\n     *   consumer_key: process.env.MPESA_CONSUMER_KEY,\n     *   consumer_secret: process.env.MPESA_CONSUMER_SECRET,\n     *   pass_key: process.env.MPESA_PASSKEY,\n     *   business_short_code: process.env.MPESA_SHORTCODE,\n     *   callback_url: ''\n     * })\n     * @param props \n     * @returns \n     */\n    async send_payment_request(props: Partial<{\n        /**\n         * @name transaction_type\n         * @description The type of transaction to be performed\n         * @type {'CustomerPayBillOnline' | 'CustomerBuyGoodsOnline'}\n         */\n        transaction_type: 'CustomerPayBillOnline' | 'CustomerBuyGoodsOnline',\n        /**\n         * @name amount\n         * @description The amount to be sent\n         * @type {number}\n         */\n        amount: number,\n        /**\n         * @name phone_number\n         * @description The phone number to send the money to\n         * @type {number}\n         */\n        phone_number: number,\n        /**\n         * @name transaction_desc\n         * @description The description of the transaction\n         * @type {string}\n         */\n        transaction_desc: string\n    }>){\n        const { transaction_desc, phone_number, transaction_type, amount } = props\n        const base_url = this._base_url\n        \n        const url = `${base_url}/mpesa/stkpush/v1/processrequest`\n        \n        try {\n            const access_token = await this._generate_access_token('c2b')\n\n            const {\n                password,\n                timestamp\n            } = await this._generate_password('c2b')\n    \n            const response = await axios.post<SendPaymentResponse>(url, {\n                BusinessShortCode: this._c2b.short_code,\n                Password: password,\n                AccountReference: this._c2b.business_name,\n                Amount: amount,\n                CallBackURL: `${this._callback_url}/c2b/callback`,\n                PartyA: phone_number,\n                PartyB: this._c2b.short_code,\n                PhoneNumber: phone_number,\n                Timestamp: timestamp,\n                TransactionDesc: transaction_desc,\n                TransactionType: transaction_type \n            } as SendPaymentRequestBody, {\n                headers: {\n                    \"Authorization\": `Bearer ${access_token}`\n                }\n            })  \n            return response.data\n        } \n        catch (e)\n        {\n            if (e instanceof AxiosError) {\n                return Promise.reject({\n                    message: 'Error sending payment request',\n                    error: e.response?.data\n                })\n            }\n            return Promise.reject({\n                message: 'Error sending payment request',\n                error: e\n            })\n        }\n    \n    }\n\n\n    async send_payout_request(props: Partial<{\n        /**\n         * @name amount\n         * @description The amount to be sent\n         * @type {number}\n         */\n        amount: number,\n        /**\n         * @name transaction_type\n         * @description The type of transaction to be performed\n         * @type {'BusinessPayment' | 'SalaryPayment' | 'PromotionPayment'}\n         */\n        transaction_type: 'BusinessPayment' | 'SalaryPayment' | 'PromotionPayment',\n        /**\n         * @name phone_number\n         * @description The phone number to send the money to\n         * @type {number}\n         */\n        phone_number: number,\n        /**\n         * @name transaction_desc\n         * @description The description of the transaction\n         * @type {string}\n         */\n        transaction_desc: string\n    }>){\n        const { amount, transaction_type, phone_number, transaction_desc } = props\n        const base_url = this._base_url\n        const url = `${base_url}/mpesa/b2c/v1/paymentrequest`\n        try {\n            const access_token = await this._generate_access_token('b2c')\n\n            const response = await axios.post<SendPayoutResponse>(url, {\n                InitiatorPassword: this._b2c.security_credential,\n                InitiatorName: this._b2c.business_name,\n                SecurityCredential: this._b2c.security_credential,\n                CommandID: transaction_type,\n                Amount: amount,\n                Occassion: 'occassion',\n                PartyA: this._b2c.short_code,\n                PartyB: phone_number,\n                QueueTimeOutURL: `${this._callback_url}/b2c/timeout`,\n                ResultURL: `${this._callback_url}/b2c/result`,\n                Remarks: transaction_desc,\n            } as SendPayoutRequest, {\n                headers: {\n                    'Authorization': `Bearer ${access_token}`\n                }\n            })\n\n            return response.data\n        }\n        catch (e)\n        {\n            if(e instanceof AxiosError) {\n                return Promise.reject({\n                    message: 'Error initiating payout',\n                    error: e.response?.data\n                })\n            }\n            return Promise.reject({\n                message: 'Error initiating payout',\n                error: e\n            })\n        }\n    }\n\n\n    /**\n     * @name set_callback_url\n     * @description for testing purposes, i.e when you need to dynamically change the callback url\n     * @param url \n     */\n    public set_callback_url(url: string){\n        this._callback_url = url\n    }\n\n    /**\n     * @name set_client \n     * !!! INTERNAL USE ONLY !!!\n     * @description this is for any clients e.g the express client, that rely on this client to set the env\n     * @param props \n     */\n    public set_client(props: Partial<{\n        env: 'sandbox' | 'production',\n        b2c_business_name: string,\n        c2b_business_name: string,\n    }>){\n        this._env = props.env || 'sandbox'\n        this._b2c.business_name = props.b2c_business_name || ''\n        this._c2b.business_name = props.c2b_business_name || ''\n    }\n}\n\n\nexport default MpesaClient\n","export const format_mpesa_date = (date: Date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    let string_month = month.toString();\n    if (string_month.length === 1) {\n      string_month = `0${string_month}`;\n    }\n    const day = date.getDate();\n    let string_day = day.toString();\n    if (string_day.length === 1) {\n      string_day = `0${string_day}`;\n    }\n    const hours = date.getHours();\n    let string_hours = hours.toString();\n    if (string_hours.length === 1) {\n      string_hours = `0${string_hours}`;\n    }\n    const minutes = date.getMinutes();\n    let string_minutes = minutes.toString();\n    if (string_minutes.length === 1) {\n      string_minutes = `0${string_minutes}`;\n    }\n    const seconds = date.getSeconds();\n    let string_seconds = seconds.toString();\n    if (string_seconds.length === 1) {\n      string_seconds = `0${string_seconds}`;\n    }\n    return `${year}${string_month}${string_day}${string_hours}${string_minutes}${string_seconds}`;\n  }\n\n\n  export function _generate_password(): {\n    password: string;\n    timestamp: string;\n  }{\n    const mpesa_shortcode = process.env.BUSINESS_SHORTCODE;\n    const mpesa_passkey = process.env.PASS_KEY;\n    const timestamp = format_mpesa_date(new Date());\n    const pre = `${mpesa_shortcode}${mpesa_passkey}${timestamp}`\n    const password = Buffer.from(pre).toString(\"base64\");\n    return {\n      password,\n      timestamp,\n    }\n  }"],"mappings":"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","names":[]}