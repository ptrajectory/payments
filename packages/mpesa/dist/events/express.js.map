{"version":3,"sources":["../../src/events/express.ts","../../src/lib/schemas.ts"],"sourcesContent":["import EventEmitter from 'events'\nimport { type tPayoutRequestCallbackBody, type tPaymentRequestCallbackBody, payment_request_callback_body_schema, payout_request_callback_body_schema } from '../lib/schemas'\nimport { Request, Response } from 'express'\nimport z from 'zod'\n\ntype CallBackEvents = {\n    /**\n     * Emitted when a payout request is successful\n     * this is where you can include logic for updating your database\n     */\n    'payout:success': tPayoutRequestCallbackBody,\n    /**\n     * Emitted when a payout request has a response code other than 0\n     * this is where you can include logic for updating your database\n     */\n    'payout:error': tPayoutRequestCallbackBody,\n    /**\n     * Emitted when a payout request has an invalid body\n     * this is where you can include logic for updating your database\n     */\n    'payout:invalid': {\n        received: unknown,\n        error: z.typeToFlattenedError<tPayoutRequestCallbackBody>\n    },\n    /**\n     * Emitted when a payment request is successful\n     * this is where you can include logic for updating your database\n     */\n    'payment:success': tPaymentRequestCallbackBody,\n    /**\n     * Emitted when a payment request has a response code other than 0\n     * this is where you can include logic for updating your database\n     */\n    'payment:error': tPaymentRequestCallbackBody,\n    /**\n     * Emitted when a payment request has an invalid body\n     * this is where you can include logic for updating your database\n     */\n    'payment:invalid': {\n        received: unknown,\n        error: z.typeToFlattenedError<tPaymentRequestCallbackBody>\n    },\n    /**\n     * Emitted when an uncaught exception occurs\n     * This is where tou can add your logging solution, e.g sentry\n     */\n    'uncaughtException': unknown\n}\n\n/**\n * `ExpressMpesaEvents` class provides events and methods for handling MPesa events.\n * \n * @example\n * ```\n * const mpesaEvents = new ExpressMpesaEvents();\n * mpesaEvents.on('payout:success', data => { ... });\n * ```\n */\nclass ExpressMpesaEvents extends EventEmitter {\n\n    constructor(){\n        super()\n        this.paymentsCallbackHandler = this.paymentsCallbackHandler.bind(this)\n        this.payoutsCallbackHandler = this.payoutsCallbackHandler.bind(this)\n    }\n\n    /**\n     * Emits an event.\n     * \n     * @param event The event to emit.\n     * @param data The data to pass to the event listeners.\n     */\n    public emit = <K extends keyof CallBackEvents>(event: K, data: CallBackEvents[K]) => super.emit(event, data)\n    /**\n     * Registers an event listener.\n     * \n     * @param event The event to listen for.\n     * @param listener The callback function to run when the event is emitted.\n     */\n    public on = <K extends keyof CallBackEvents>(event: K, listener: (data: CallBackEvents[K]) => void) => super.on(event, listener)\n\n    /**\n     * @description Handles the callback from the mpesa api for payouts\n     * @param req \n     * @param res \n     */\n    public async payoutsCallbackHandler(req: Request, res: Response) {\n        res.status(200).send('OK')\n        const parsed = payout_request_callback_body_schema.safeParse(req.body)\n        if (!parsed.success){\n            this.emit('payout:invalid', {\n                received: req.body,\n                error: parsed.error.formErrors\n            })\n        }\n        else \n        {\n            const data = parsed.data \n            try {\n                switch (data.Result?.ResultCode?.toString()){\n                    case '0':{\n                        this.emit('payout:success', data)\n                        break;\n                    }\n                    default: {\n                        this.emit('payout:error', data)\n                    }\n                }\n            }\n            catch (e)\n            {\n                this.emit('uncaughtException', e)\n            }\n        }\n    }\n\n    /**\n     * @description Handles the callback from the mpesa api for payments\n     * @param req \n     * @param res \n     */\n    public async paymentsCallbackHandler(req: Request, res: Response) {\n        res.status(200).send('OK')\n        const parsed = payment_request_callback_body_schema.safeParse(req.body)\n        if (!parsed.success){\n            this.emit('payment:invalid', {\n                received: req.body,\n                error: parsed.error.formErrors\n            })\n        }\n        else \n        {\n            const data = parsed.data \n            try {\n                switch (data.Body?.stkCallback?.ResultCode?.toString()){\n                    case '0':{\n                        this.emit('payment:success', data)\n                        break;\n                    }\n                    default: {\n                        this.emit('payment:error', data)\n                    }\n                }\n\n            } catch(e)\n            {\n                this.emit('uncaughtException', e)\n            }\n        }\n    }\n}\n\nexport default new ExpressMpesaEvents()\n\nexport {\n    ExpressMpesaEvents\n}","import z from 'zod'\n\n/**\n * @name payout_request_callback_body_schema\n * @description Schema for the body of the payout request callback\n * @type {zod.Schema}\n */\nconst payout_request_callback_body_schema = z.object({\n    Result: z.object({\n        ResultType: z.number().optional(),\n        ResultCode: z.number().optional(),\n        ResultDesc: z.string().optional(),\n        OriginatorConversationID: z.string().optional(),\n        ConversationID: z.string().optional(),\n        TransactionID: z.string().optional(),\n        ReferenceData: z.object({\n            ReferenceItem: z.object({\n                Key: z.string().optional(),\n                Value: z.string().optional()\n            }).optional()\n        }).optional()\n    }).optional()\n})\n\ntype tPayoutRequestCallbackBody = z.infer<typeof payout_request_callback_body_schema>\n\n\n/**\n * @name payment_request_callback_body_schema\n * @description Schema for the body of the payment request callback \n * @type {zod.Schema}\n */\nconst payment_request_callback_body_schema = z.object({\n    Body: z.object({\n        stkCallback: z.object({\n            MerchantRequestID: z.string(),\n            CheckoutRequestID: z.string(),\n            ResultCode: z.number().optional(),\n            ResultDesc: z.string().optional(),\n            CallbackMetadata: z.object({\n                Item: z.array(z.object({\n                    Name: z.string(),\n                    Value: z.string()\n                })).optional()\n            }).array().optional()\n        })\n    })\n})\n\ntype tPaymentRequestCallbackBody = z.infer<typeof payment_request_callback_body_schema> \n\n\nexport {\n    payment_request_callback_body_schema,\n    type tPaymentRequestCallbackBody,\n    payout_request_callback_body_schema,\n    type tPayoutRequestCallbackBody\n}"],"mappings":"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","names":[]}