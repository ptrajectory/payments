// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ENVIRONMENT {
  production
  testing
}

enum PURCHASE_TYPE {
  monthly_subscription
  one_time
}

model Customer {
  id              String          @id
  first_name      String
  last_name       String
  email           String
  status          String?
  meta            Json?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  payment_methods PaymentMethod[]
  checkouts       Checkout[]
  carts           Cart[]
  payments        Payment[]
  store           Store           @relation(fields: [store_id], references: [id])
  store_id        String
  environment     ENVIRONMENT @default(testing)
}

model PaymentMethod {
  id           String     @id
  customer     Customer?  @relation(fields: [customer_id], references: [id])
  customer_id  String?
  status       String?
  type         String
  phone_number String
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  checkouts    Checkout[]
  payments     Payment[]
  store        Store      @relation(fields: [store_id], references: [id])
  store_id     String
  environment  ENVIRONMENT @default(testing)
  is_default   Boolean     @default(false)
}

model Checkout {
  id                String         @id
  amount            Float
  currency          String
  status            String?
  purchase_type     PURCHASE_TYPE  @default(one_time)
  customer          Customer?      @relation(fields: [customer_id], references: [id])
  customer_id       String?
  payment_method    PaymentMethod? @relation(fields: [payment_method_id], references: [id])
  payment_method_id String?
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  cart              Cart?          @relation(fields: [cart_id], references: [id])
  cart_id           String?        @unique
  payments          Payment[]
  store             Store          @relation(fields: [store_id], references: [id])
  store_id          String
  environment       ENVIRONMENT    @default(testing)
}

model Product {
  id          String     @id
  name        String?
  description String?
  price       Float?     @default(0.0)
  status      String?
  image       String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  carts       CartItem[]
  store       Store      @relation(fields: [store_id], references: [id])
  store_id    String
  environment       ENVIRONMENT @default(testing)
}

model Cart {
  id          String     @id
  customer    Customer?  @relation(fields: [customer_id], references: [id])
  status      String?
  customer_id String?
  items       CartItem[]
  checkout    Checkout?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  store       Store      @relation(fields: [store_id], references: [id])
  store_id    String
  environment       ENVIRONMENT @default(testing)
}

model CartItem {
  id         String   @id
  cart       Cart?    @relation(fields: [cart_id], references: [id])
  cart_id    String?
  product    Product? @relation(fields: [product_id], references: [id])
  product_id String?
  status     String?
  quantity   Int      @default(1)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  store      Store    @relation(fields: [store_id], references: [id])
  store_id   String
  environment       ENVIRONMENT @default(testing)
}

model Payment {
  id                String        @id
  amount            Float
  token             String
  status            String
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  payment_method    PaymentMethod @relation(fields: [payment_method_id], references: [id])
  payment_method_id String
  checkout_id       String?
  checkout          Checkout?      @relation(fields: [checkout_id], references: [id])
  customer_id       String?
  customer          Customer?      @relation(fields: [customer_id], references: [id])
  store             Store         @relation(fields: [store_id], references: [id])
  store_id          String
  environment       ENVIRONMENT @default(testing)
}

model Seller {
  id          String   @id
  uid         String?
  first_name  String?
  last_name   String?
  avatar      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now())
  email       String?
  seller_name String?
  stores      Store[]
}

model Store {
  id              String          @id
  seller          Seller         @relation(fields: [seller_id], references: [id])
  seller_id       String
  name            String?
  image           String?
  description     String?
  prod_secret_key      String? // formatted JWT
  test_secret_key      String? // formatted JWT
  prod_publishable_key String?
  test_publishable_key String?
  status          String?
  customers       Customer[]
  payment_methods PaymentMethod[]
  products        Product[]
  carts           Cart[]
  cart_items      CartItem[]
  payments        Payment[]
  checkouts       Checkout[]
  created_at DateTime @default(now())
  updated_at DateTime @default(now())
}

model EphemeralPaymentKeys {
  id  String  @id
  created_at DateTime @default(now())
}
