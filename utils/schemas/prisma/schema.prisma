// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

enum ENVIRONMENT {
  production
  testing
}

enum PRODUCT_TYPES {
  physical
  digital
  service
  subscription
  bundle
  event_ticket
  discounted
  pay_what_you_want
}

enum PURCHASE_TYPE {
  monthly_subscription
  one_time
  pre_order
  backorder
  pay_what_you_want
}

enum PRODUCT_STATUS {
  draft
  published
  archived
}

enum CHECKOUT_STATUS {
  pending_payment
  processing
  failed
  success
}

enum CART_STATUS {
  open
  closed
}

enum PAYMENT_STATE {
  processing
  failed
  success
  cancelled
  timed_out
}

enum KEY_STATUS {
  active
  inactive
}

enum PAYMENT_METHOD_TYPE {
  mpesa
  airtel
  momo
}

model Customer {
  id              String          @id
  first_name      String
  last_name       String
  email           String
  status          String?
  meta            Json?
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  payment_methods PaymentMethod[]
  checkouts       Checkout[]
  carts           Cart[]
  payments        Payment[]
  store           Store           @relation(fields: [store_id], references: [id])
  store_id        String
  environment     ENVIRONMENT     @default(testing)
}

model PaymentMethod {
  id           String      @id
  customer     Customer?   @relation(fields: [customer_id], references: [id])
  customer_id  String?
  status       String? // [deprecated] graduall pahse out
  type         PAYMENT_METHOD_TYPE @default(mpesa)
  phone_number String
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  checkouts    Checkout[]
  payments     Payment[]
  store        Store       @relation(fields: [store_id], references: [id])
  store_id     String
  environment  ENVIRONMENT @default(testing)
  is_default   Boolean     @default(false)
}

model Checkout {
  id                String          @id
  currency          String          @default("KES")
  status            CHECKOUT_STATUS @default(pending_payment)
  purchase_type     PURCHASE_TYPE   @default(one_time)
  customer          Customer?       @relation(fields: [customer_id], references: [id])
  customer_id       String?
  payment_method    PaymentMethod?  @relation(fields: [payment_method_id], references: [id])
  payment_method_id String?
  created_at        DateTime        @default(now())
  updated_at        DateTime        @default(now()) @updatedAt
  cart              Cart?           @relation(fields: [cart_id], references: [id])
  cart_id           String?         @unique
  payments          Payment[]
  store             Store           @relation(fields: [store_id], references: [id])
  store_id          String
  environment       ENVIRONMENT     @default(testing)
}

model Product {
  id          String         @id
  name        String?
  description String?
  price       Float?         @default(0.0)
  status      PRODUCT_STATUS @default(draft)
  image       String?
  created_at  DateTime       @default(now())
  updated_at  DateTime       @default(now()) @updatedAt
  environment ENVIRONMENT    @default(testing)
  type        PRODUCT_TYPES  @default(physical)
  carts       CartItem[]
  store       Store          @relation(fields: [store_id], references: [id])
  store_id    String
}

model Cart {
  id          String      @id
  customer    Customer?   @relation(fields: [customer_id], references: [id])
  status      CART_STATUS @default(open)
  customer_id String?
  items       CartItem[]
  checkout    Checkout?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  store       Store       @relation(fields: [store_id], references: [id])
  store_id    String
  environment ENVIRONMENT @default(testing)
}

model CartItem {
  id          String      @id
  cart        Cart?       @relation(fields: [cart_id], references: [id])
  cart_id     String?
  product     Product?    @relation(fields: [product_id], references: [id])
  product_id  String?
  quantity    Int         @default(1)
  created_at  DateTime    @default(now())
  updated_at  DateTime    @default(now()) @updatedAt
  store       Store       @relation(fields: [store_id], references: [id])
  store_id    String
  environment ENVIRONMENT @default(testing)
}

model Payment {
  id                String         @id
  amount            Float
  token             String
  state             PAYMENT_STATE  @default(processing)
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
  payment_method    PaymentMethod? @relation(fields: [payment_method_id], references: [id])
  payment_method_id String?
  checkout_id       String?
  checkout          Checkout?      @relation(fields: [checkout_id], references: [id])
  customer_id       String?
  customer          Customer?      @relation(fields: [customer_id], references: [id])
  store             Store          @relation(fields: [store_id], references: [id])
  store_id          String
  environment       ENVIRONMENT    @default(testing)
}

model Seller {
  id          String   @id
  uid         String?
  first_name  String?
  last_name   String?
  avatar      String?
  created_at  DateTime @default(now())
  updated_at  DateTime @default(now()) @updatedAt
  email       String?
  seller_name String?
  stores      Store[]
}

model Store {
  id              String          @id
  seller          Seller          @relation(fields: [seller_id], references: [id])
  seller_id       String
  name            String?
  image           String?
  description     String?
  environment     ENVIRONMENT     @default(testing)
  status          String?
  customers       Customer[]
  payment_methods PaymentMethod[]
  products        Product[]
  carts           Cart[]
  cart_items      CartItem[]
  payments        Payment[]
  checkouts       Checkout[]
  created_at      DateTime        @default(now())
  updated_at      DateTime        @default(now()) @updatedAt
  keys            Keys[]
}

model Keys {
  id          String      @id
  store_id    String
  store       Store       @relation(fields: [store_id], references: [id])
  name        String
  expiry      DateTime?
  status      KEY_STATUS  @default(active)
  value       String
  environment ENVIRONMENT @default(testing)
}
